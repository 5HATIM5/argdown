/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ArgdownParser = (function(){
var parser = {trace: function trace() {
        Jison.print.apply(null, arguments);
    },
yy: {},
symbols_: {"error":2,"start":3,"optionallinebreaks":4,"graphs":5,"EOF":6,"ids":7,"id":8,"EMPTYLINE":9,"graph":10,"statement":11,"reasons":12,"tabs":13,"relation":14,"reason":15,"NEWLINE":16,"optionaltabs":17,"optionalspace":18,"text":19,"PRO":20,"CONTRA":21,"PRO-OUT":22,"CONTRA-OUT":23,"TITLE":24,"words":25,"TAB":26,"optionalnewline":27,"SPACE":28,"USER":29,"DIGIT":30,"word":31,"TEXT":32,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",9:"EMPTYLINE",16:"NEWLINE",20:"PRO",21:"CONTRA",22:"PRO-OUT",23:"CONTRA-OUT",24:"TITLE",26:"TAB",28:"SPACE",29:"USER",30:"DIGIT",32:"TEXT"},
productions_: [0,[3,3],[3,1],[7,2],[7,1],[5,3],[5,1],[10,2],[10,1],[10,5],[10,4],[10,4],[10,3],[10,4],[10,3],[12,2],[12,1],[15,4],[15,5],[15,5],[15,4],[14,1],[14,1],[14,1],[14,1],[11,1],[11,2],[11,1],[11,3],[11,2],[11,2],[11,1],[19,3],[17,0],[17,2],[13,3],[13,1],[4,0],[4,1],[4,1],[27,0],[27,1],[18,0],[18,1],[8,2],[8,2],[25,3],[25,1],[31,2],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:$$[$0-1].splice(0,0,{name:"start", text:$$[$0-2]}); $$[$0-1].push({name:"eof", text:$$[$0]}); return $$[$0-1];
break;
case 2:return [{name:"eof", text:$$[$0]}];
break;
case 3:$$[$0-1].ids.push($$[$0]); $$[$0-1].text += $$[$0]; this.$ = $$[$0-1];
break;
case 4:this.$ = {name:"ids", text:$$[$0], ids:[$$[$0]]};
break;
case 5: $$[$0-2].push({name:"emptyline", text:$$[$0-1]}); $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 6: this.$ = [$$[$0]];
break;
case 7: this.$ = root; this.$.children[0] = $$[$0-1]; 
break;
case 8: this.$ = {name:"thesis", children:[$$[$0]]};
break;
case 9: 
	/*
	if we use optionaltabs, we get into trouble, because of conflicts with optionalspace. Didn't know how to fix that, so we just use tabs here and insert a second case if there are no tabs.
	*/
		console.log("rule: | tabs relation statement reasons error %prec TAB{ ");
		yy.errors = true;
		var reason =  {name:"reason", indent:$$[$0-4].indent};
		addChildren(reason,[$$[$0-4],$$[$0-3],$$[$0-2]]);
		this.$ = addChildToGraph(reason,false,true);//use unshift to insert reason at the beginning
	
break;
case 10: 
		console.log("rule: | tabs relation statement error %prec TAB{ ");
		yy.errors = true;
		var reason =  {name:"reason", indent:$$[$0-3].indent};
		addChildren(reason,[$$[$0-3],$$[$0-2],$$[$0-1]]);
		this.$ = addChildToGraph(reason,true,false,true);
	
break;
case 11:
		console.log("rule: | relation statement reasons error %prec TAB { ");
		yy.errors = true;
		var reason =  {name:"reason", indent:0};
		addChildren(reason,[$$[$0-3],$$[$0-2]]);
		this.$ = addChildToGraph(reason,false,true);//use unshift to insert reason at the beginning	
	
break;
case 12:
		console.log("rule: | relation statement error %prec TEXT {");
		yy.errors = true;
		var reason =  {name:"reason", indent:0};
		addChildren(reason,[$$[$0-2],$$[$0-1]]);
		this.$ = addChildToGraph(reason,true,false,true);
	
break;
case 13: 
		console.log("rule: | tabs relation statement reasons error %prec TAB{ ");
		yy.errors = true;
		var reason =  {name:"reason", indent:$$[$0-3].indent};
		addChildren(reason,[$$[$0-3],$$[$0-2]]);
		this.$ = addChildToGraph(reason,false,true);//use unshift to insert reason at the beginning
	
break;
case 14: 
		console.log("rule: | tabs relation statement reasons error %prec TAB{ ");
		yy.errors = true;
		var reason =  {name:"reason", indent:$$[$0-2].indent};
		addChildren(reason,[$$[$0-2],$$[$0-1]]);
		this.$ = addChildToGraph(reason,true,false,true);
	
break;
case 15:this.$ = addChildToGraph($$[$0]);
break;
case 16:this.$ = addChildToGraph($$[$0], true);
break;
case 17:
		$$[$0-2].text = $$[$0-3] + $$[$0-2].text;
		this.$ = {name:"reason", indent:$$[$0-2].indent};
		addChildren(this.$,[$$[$0-2],$$[$0-1],$$[$0]]);
	
break;
case 18:
		yy.errors = true;
		$$[$0-3].text = $$[$0-4] + $$[$0-3].text;
		this.$ = {name:"reason", indent:$$[$0-3].indent};
		addChildren(this.$,[$$[$0-3],$$[$0-2], {name:"space",text:$$[$0-1]}]);
	
break;
case 19:
		yy.errors = true;
		$$[$0-3].text = $$[$0-4]+$$[$0-3].text+$$[$0-2];
		this.$ = {name:"reason", indent:$$[$0-3].indent};
		addChildren(this.$,[$$[$0-3],$$[$0-1]]);	
	
break;
case 20:
		yy.errors = true;
		$$[$0-2].text = $$[$0-3]+$$[$0-2].text;
		this.$ = {name:"reason", indent:$$[$0-2].indent};
		addChildren(this.$,[$$[$0-2],{name:"space",text:$$[$0-1]}]);
	
break;
case 21:this.$ = {name:"relation", text:$$[$0], type:"pro", direction:"to"};
break;
case 22:this.$ = {name:"relation", text:$$[$0], type:"contra", direction:"to"};
break;
case 23:this.$ = {name:"relation", text:$$[$0], type:"pro", direction:"from"};
break;
case 24:this.$ = {name:"relation", text:$$[$0], type:"contra", direction:"from"};
break;
case 25:
		this.$ = createNode("statement"); 
		addChildren(this.$,[$$[$0]]);
		
break;
case 26:
		this.$ = createNode("statement"); 
		addChildren(this.$,[createTitleNode($$[$0-1]),$$[$0]]);
		
break;
case 27:
		this.$ = createNode("statement"); 
		addChildren(this.$,[createTitleNode($$[$0])]);
		
break;
case 28:
		this.$ = createNode("statement"); 
		addChildren(this.$,[$$[$0-2],createTitleNode($$[$0-1]),$$[$0]]);
		
break;
case 29:
		this.$ = createNode("statement"); 
		addChildren(this.$,[$$[$0-1],createTitleNode($$[$0])]);
		
break;
case 30:
		this.$ = createNode("statement"); 
		addChildren(this.$,[$$[$0-1],$$[$0]]);
	
break;
case 31:
		this.$ = createNode("statement"); 
		addChildren(this.$,[$$[$0]]);
		
break;
case 32:this.$ = {name:"text", text:$$[$0-2] + $$[$0-1] + $$[$0]};
break;
case 33:this.$ = {name:"tabs", text:"", indent:0};
break;
case 34:this.$ = $$[$0-1]; this.$.text = this.$.text + $$[$0];
break;
case 35:this.$=$$[$0-2]; this.$.indent++; this.$.text = this.$.text + $$[$0-1] + $$[$0];
break;
case 36:this.$ = {name:"tabs", text:$$[$0], indent:1};
break;
case 40:this.$ = "";
break;
case 41:this.$ = $$[$0];
break;
case 42:this.$ = "";
break;
case 43:this.$ = $$[$0];
break;
case 44:this.$ = {name:"id", text:$$[$0-1]+$$[$0], id:extractID($$[$0-1]+$$[$0]), author:extractUser($$[$0-1]), authorIndex:$$[$0]};
break;
case 45:yy.errors = true; this.$ = {name:"user", text:$$[$0-1], user:extractUser($$[$0-1])};
break;
case 46:this.$ = $$[$0-2] + $$[$0-1] +$$[$0]
break;
case 47:this.$ = $$[$0];
break;
case 48:this.$ = $$[$0-1] + $$[$0];
break;
}
},
table: [{3:1,4:2,6:[1,3],9:[1,5],16:[1,4],20:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],26:[2,37],28:[2,37],29:[2,37],32:[2,37]},{1:[3]},{5:6,8:13,10:7,11:8,13:9,14:10,18:19,19:11,20:[1,15],21:[1,16],22:[1,17],23:[1,18],24:[1,12],26:[1,14],28:[1,21],29:[1,20],32:[2,42]},{1:[2,2]},{20:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],26:[2,38],28:[2,38],29:[2,38],32:[2,38]},{20:[2,39],21:[2,39],22:[2,39],23:[2,39],24:[2,39],26:[2,39],28:[2,39],29:[2,39],32:[2,39]},{6:[1,22],9:[1,23]},{6:[2,6],9:[2,6]},{6:[2,8],9:[2,8],12:24,15:25,16:[1,26]},{8:13,11:28,14:27,18:29,19:11,20:[1,15],21:[1,16],22:[1,17],23:[1,18],24:[1,12],26:[2,42],28:[1,21],29:[1,20],32:[2,42]},{8:13,11:30,18:19,19:11,24:[1,12],28:[1,21],29:[1,20],32:[2,42]},{2:[2,25],6:[2,25],9:[2,25],16:[2,25]},{2:[2,27],6:[2,27],9:[2,27],16:[2,27],18:19,19:31,28:[1,21],32:[2,42]},{2:[2,31],6:[2,31],9:[2,31],16:[2,31],18:19,19:33,24:[1,32],28:[1,21],32:[2,42]},{2:[2,36],20:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],26:[2,36],28:[2,36],29:[2,36],32:[2,36]},{2:[2,21],24:[2,21],28:[2,21],29:[2,21],32:[2,21]},{2:[2,22],24:[2,22],28:[2,22],29:[2,22],32:[2,22]},{2:[2,23],24:[2,23],28:[2,23],29:[2,23],32:[2,23]},{2:[2,24],24:[2,24],28:[2,24],29:[2,24],32:[2,24]},{25:34,31:35,32:[1,36]},{2:[1,38],30:[1,37]},{2:[2,43],20:[2,43],21:[2,43],22:[2,43],23:[2,43],26:[2,43],28:[2,43],32:[2,43]},{1:[2,1]},{8:13,10:39,11:8,13:9,14:10,18:19,19:11,20:[1,15],21:[1,16],22:[1,17],23:[1,18],24:[1,12],26:[1,14],28:[1,21],29:[1,20],32:[2,42]},{6:[2,7],9:[2,7],15:40,16:[1,26]},{2:[2,16],6:[2,16],9:[2,16],16:[2,16]},{2:[2,33],13:42,17:41,20:[2,33],21:[2,33],22:[2,33],23:[2,33],26:[1,14],28:[2,33],32:[2,33]},{8:13,11:43,18:19,19:11,24:[1,12],28:[1,21],29:[1,20],32:[2,42]},{2:[1,45],12:44,15:25,16:[1,26]},{25:34,26:[1,46],31:35,32:[1,36]},{2:[1,48],12:47,15:25,16:[1,26]},{2:[2,26],6:[2,26],9:[2,26],16:[2,26]},{2:[2,29],6:[2,29],9:[2,29],16:[2,29],18:19,19:49,28:[1,21],32:[2,42]},{2:[2,30],6:[2,30],9:[2,30],16:[2,30]},{2:[2,42],6:[2,42],9:[2,42],16:[2,42],18:50,28:[1,51]},{2:[2,47],6:[2,47],9:[2,47],16:[2,47],28:[2,47],32:[1,52]},{2:[2,49],6:[2,49],9:[2,49],16:[2,49],28:[2,49],32:[2,49]},{2:[2,44],6:[2,44],9:[2,44],16:[2,44],24:[2,44],28:[2,44],32:[2,44]},{2:[2,45],6:[2,45],9:[2,45],16:[2,45],24:[2,45],28:[2,45],32:[2,45]},{6:[2,5],9:[2,5]},{2:[2,15],6:[2,15],9:[2,15],16:[2,15]},{2:[2,42],14:53,18:54,20:[1,15],21:[1,16],22:[1,17],23:[1,18],28:[1,21],32:[2,42]},{2:[2,42],18:55,20:[2,42],21:[2,42],22:[2,42],23:[2,42],26:[2,42],28:[1,21],32:[2,42]},{2:[1,57],12:56,15:25,16:[1,26]},{2:[1,58],15:40,16:[1,26]},{6:[2,14],9:[2,14]},{2:[2,35],20:[2,35],21:[2,35],22:[2,35],23:[2,35],24:[2,35],26:[2,35],28:[2,35],29:[2,35],32:[2,35]},{2:[1,59],15:40,16:[1,26]},{6:[2,12],9:[2,12]},{2:[2,28],6:[2,28],9:[2,28],16:[2,28]},{2:[2,32],6:[2,32],9:[2,32],16:[2,32]},{2:[2,43],6:[2,43],9:[2,43],16:[2,43],31:60,32:[1,36]},{2:[2,48],6:[2,48],9:[2,48],16:[2,48],28:[2,48],32:[2,48]},{2:[2,42],8:13,11:61,18:62,19:11,24:[1,12],28:[1,21],29:[1,20],32:[2,42]},{2:[1,64],18:19,19:63,28:[1,21],32:[2,42]},{2:[2,34],20:[2,34],21:[2,34],22:[2,34],23:[2,34],26:[1,46],28:[2,34],32:[2,34]},{2:[1,65],15:40,16:[1,26]},{6:[2,10],9:[2,10]},{6:[2,13],9:[2,13]},{6:[2,11],9:[2,11]},{2:[2,46],6:[2,46],9:[2,46],16:[2,46],28:[2,46],32:[1,52]},{2:[2,17],6:[2,17],9:[2,17],16:[2,17]},{2:[1,66],25:34,31:35,32:[1,36]},{2:[1,67]},{2:[2,20],6:[2,20],9:[2,20],16:[2,20]},{6:[2,9],9:[2,9]},{2:[2,18],6:[2,18],9:[2,18],16:[2,18]},{2:[2,19],6:[2,19],9:[2,19],16:[2,19]}],
defaultActions: {3:[2,2],22:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);

    var ranges = this.lexer.options && this.lexer.options.ranges;

    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = self.lexer.lex() || EOF; // $end = 1
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var extractID = function(str){
		return str.substring(str.indexOf("@")+1).replace(" ","");
	};
	var extractUser = function(str){
		return str.substring(str.indexOf("@")+1,str.indexOf(":")).replace(" ","");
	};
	var extractTitle = function(str){
		return str.substring(str.indexOf("[")+1, str.indexOf("]"));
	};
	var createNode = function(name){
		return {name:name, children:[]};
	};
	var createTitleNode = function(str){
		return {name:"title", text:str, title:extractTitle(str)};
	};
	var addChildren = function(parent,children){
		parent.children = children;
		for(var i = 0; i<children.length; i++){
			children[i].parent = parent;
		}
	};
	var prevLevel = 0;
	var prevNode;

	var root = {children:[], name:"thesis"};
	var addChildToGraph = function(node, reset, unshift,noPlaceholderForStatement){
		if(reset){
			root = {children:[], name:"thesis"};
			if(!noPlaceholderForStatement)root.children.push({});
		 	prevLevel = 0;
		 	prevNode = null;
		}
		var level = node.indent;

		if(prevNode == null) {
			node.parent = root;
			if(!unshift)root.children.push(node);
			else root.children.unshift(node);
		}else if(level > prevLevel){
			node.parent = prevNode;
			prevNode.children = prevNode.children || [];
			prevNode.children.push(node);
		}else if(level < prevLevel){
			var parent = prevNode.parent;
			while(level < prevLevel && parent.parent){
				parent = parent.parent;
				prevLevel--;
			}
			node.parent = parent;
			if(!unshift)parent.children.push(node);
			else parent.children.unshift(node);
		}else if(level == prevLevel){
			node.parent = prevNode.parent;
			if(!unshift) prevNode.parent.children.push(node); 
			else prevNode.parent.children.unshift(node);
		}

		prevLevel = level;
		prevNode = node;

		return root;
	}
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin('INITIAL'); return 6; 
break;
case 1: this.begin('indented'); return 9; 
break;
case 2: this.begin('indented'); return 16; 
break;
case 3: this.begin('indented'); return 26; 
break;
case 4: this.begin('indented'); return 26; 
break;
case 5: return 24; 
break;
case 6: this.begin('user'); return 29; 
break;
case 7: this.popState(); return 30
break;
case 8: this.begin('INITIAL'); return 22; 
break;
case 9: this.begin('INITIAL'); return 22; 
break;
case 10: this.begin('INITIAL'); return 22; 
break;
case 11: this.begin('INITIAL'); return 23; 
break;
case 12: this.begin('INITIAL'); return 23; 
break;
case 13: this.begin('INITIAL'); return 23; 
break;
case 14: this.begin('INITIAL'); return 20; 
break;
case 15: this.begin('INITIAL'); return 20; 
break;
case 16: this.begin('INITIAL'); return 20; 
break;
case 17: this.begin('INITIAL'); return 21; 
break;
case 18: this.begin('INITIAL'); return 21; 
break;
case 19: this.begin('INITIAL'); return 21; 
break;
case 20: this.begin('INITIAL'); return 20; 
break;
case 21: this.begin('INITIAL'); return 21; 
break;
case 22: this.begin('INITIAL'); return 21; 
break;
case 23: this.popState(); return 21; 
break;
case 24: this.popState(); return 20; 
break;
case 25: return 28; 
break;
case 26: this.begin('INITIAL'); return 32; 
break;
}
},
rules: [/^(?:$)/,/^(?:(((\r\r)+|(\n\n)+)|((\r\n)(\r\n))+)[\n\r]*)/,/^(?:[\n\r]+)/,/^(?:(   ))/,/^(?:(\t))/,/^(?:( *\[(.)+\] *))/,/^(?: *@\w+:)/,/^(?:\d+ *)/,/^(?:thus\+)/,/^(?:>\+)/,/^(?:->\+)/,/^(?:thus-)/,/^(?:>-)/,/^(?:->-)/,/^(?:\+because\b)/,/^(?:\+<-)/,/^(?:\+<)/,/^(?:-because\b)/,/^(?:-<-)/,/^(?:-<)/,/^(?:pro:)/,/^(?:contra:)/,/^(?:though:)/,/^(?:-)/,/^(?:\+)/,/^(?:[' '\t]+)/,/^(?:.)/],
conditions: {"user":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26],"inclusive":true},"indented":{"rules":[0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ArgdownParser;
exports.Parser = ArgdownParser.Parser;
exports.parse = function () { return ArgdownParser.parse.apply(ArgdownParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}